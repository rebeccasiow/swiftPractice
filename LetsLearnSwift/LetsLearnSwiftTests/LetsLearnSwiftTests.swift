
// Note: Feel free to use this file to debug your solutions. Do not edit this file in any way or you will get a 0 on this lab.

// Instructions: To run the tests, click the diamonds next to each function. To run all of the tests, click the diamond next to the class declaration. Alternatively, click and hold on the play button and select the 'Test' option from the dropdown. To see a summary of your tests, use the test navigator on the left (diamond icon).


import XCTest
@testable import LetsLearnSwift

class CSE941LetsLearnSwiftTests: XCTestCase {
    
    func testHelloWorld() {
        XCTAssertEqual(helloWorld(), "Hello, world!")
    }
    
    func testAverage() {
        XCTAssertEqual(average(0, b: 0, c: 0), 0)
        XCTAssertEqual(average(1, b: 2, c: 3), 2)
        XCTAssertEqual(average(-100, b: 0, c: 100), 0)
        XCTAssertEqual(average(17, b: 55, c: 89), (17+55+89)/3)
    }
    
    func testCircleArea() {
        XCTAssertEqual(circleArea(0), 0)
        XCTAssertEqual(circleArea(5), 25 * M_PI)
    }
    
    func testDistance() {
        XCTAssertEqual(distance(0, y1: 0, x2: 0, y2: 1), 1)
        XCTAssertEqual(distance(4, y1: 3, x2: 9, y2: 3), 5)
        XCTAssertEqual(distance(-2, y1: -3, x2: -2, y2: 1), 4)
        XCTAssertEqual(distance(0, y1: 0, x2: 1, y2: 1), sqrt(2))
    }
    
    func testFactorial() {
        XCTAssertEqual(factorial(1), 1)
        XCTAssertEqual(factorial(2), 2)
        XCTAssertEqual(factorial(3), 6)
        XCTAssertEqual(factorial(4), 24)
    }
    
    func testEmphasize() {
        XCTAssertEqual(emphasize(""), "!")
        XCTAssertEqual(emphasize("hello"), "hello!")
        XCTAssertEqual(emphasize("!"), "!!")
    }
    
    func testTooLong() {
        XCTAssertEqual(tooLong("s"), false)
        XCTAssertEqual(tooLong("123456789"), false)
        XCTAssertEqual(tooLong("1234567890"), false)
        XCTAssertEqual(tooLong("12345678911"), true)
        XCTAssertEqual(tooLong("abcdefghijklmnopqrstuvwxyz"), true)
    }
    
    func testApplesAndOranges() {
        XCTAssertEqual(applesAndOranges(0, oranges: 0), "I have 0 apples and 0 oranges.")
        XCTAssertEqual(applesAndOranges(1, oranges: 2), "I have 1 apple and 2 oranges.")
        XCTAssertEqual(applesAndOranges(2, oranges: 1), "I have 2 apples and 1 orange.")
        XCTAssertEqual(applesAndOranges(1, oranges: 1), "I have 1 apple and 1 orange.")
    }
    
    func testDuplicate() {
        XCTAssertEqual(duplicate("abc", times: 3), "abcabcabc")
        XCTAssertEqual(duplicate("", times: 7), "")
        XCTAssertEqual(duplicate("x", times: 1), "x")
        XCTAssertEqual(duplicate("x", times: 10), "xxxxxxxxxx")
        XCTAssertEqual(duplicate("x", times: 0), "")
    }
    
    func testRemoveVowels() {
        XCTAssertEqual(removeVowels(""), "")
        XCTAssertEqual(removeVowels("abc"), "bc")
        XCTAssertEqual(removeVowels("12345"), "12345")
        XCTAssertEqual(removeVowels("hello world"), "hll wrld")
        XCTAssertEqual(removeVowels("aeiouy"), "y")
        XCTAssertEqual(removeVowels("aabaabaa"), "bb")
    }
    
    func testSumArray() {
        XCTAssertEqual(sumArray([0]), 0)
        XCTAssertEqual(sumArray([1,2,3]), 6)
        XCTAssertEqual(sumArray([-3,3,-3,3]), 0)
        XCTAssertEqual(sumArray([5,5,5,5,5]), 25)
    }
    
    func testIntRange() {
        XCTAssertEqual(intRange([1,2,3,4,5]), 4)
        XCTAssertEqual(intRange([0]), 0)
        XCTAssertEqual(intRange([3,3]), 0)
        XCTAssertEqual(intRange([-5,5]), 10)
        XCTAssertEqual(intRange([1,1,-1,2,-3,5,8,-10,10]), 20)
    }
    
    func testRemoveLargeStrings() {
        XCTAssertEqual(removeLargeStrings([""]), [""])
        XCTAssertEqual(removeLargeStrings(["a","b","c"]), ["a","b","c"])
        XCTAssertEqual(removeLargeStrings(["hello", "yes", "no"]), ["no"])
        XCTAssertEqual(removeLargeStrings(["1234","123","12345"]), [])
    }
    
    func testCombineDictionaries() {
        XCTAssertEqual(combineDictionaries([0:"0", 1:"1", 2:"2"], b: [3:"3"]), [0:"0", 1:"1", 2:"2", 3:"3"])
        XCTAssertEqual(combineDictionaries([:], b: [:]), [:])
    }
    
    func testCreateSet() {
        XCTAssertEqual(createSet(["hello"], b: ["world"]), Set<String>(arrayLiteral: "hello", "world"))
        XCTAssertEqual(createSet(["a","b","c"], b: ["c","d","e"]), Set<String>(arrayLiteral: "a","b","c","d","e"))
    }
    
    func testMissingInt() {
        XCTAssertEqual(missingInt(0), 0)
        XCTAssertEqual(missingInt(nil), 0)
        XCTAssertEqual(missingInt(3), 3)
    }
    
    func testNameFromShape() {
        XCTAssertEqual(nameFromShape(.Circle), "Circle")
        XCTAssertEqual(nameFromShape(.Square), "Square")
        XCTAssertEqual(nameFromShape(.Triangle), "Triangle")
    }
    
    func testStatusFromCode() {
        XCTAssertEqual(statusFromCode(200), StatusCode.Success)
        XCTAssertEqual(statusFromCode(403), StatusCode.Forbidden)
        XCTAssertEqual(statusFromCode(404), StatusCode.NotFound)
        XCTAssertEqual(statusFromCode(500), StatusCode.InternalServerError)
        XCTAssertEqual(statusFromCode(0), nil)
    }
    
    func testOperate() {
        XCTAssertEqual(operate(3, b: 2, operation: Operation.Add), 5)
        XCTAssertEqual(operate(3, b: 2, operation: Operation.Subtract), 1)
        XCTAssertEqual(operate(3, b: 2, operation: Operation.Multiply), 6)
        XCTAssertEqual(operate(3, b: 2, operation: Operation.Divide), 1.5)
    }
    
    func testVectorize() {
        XCTAssertEqual(vectorize(Point(x: 0, y: 0), p2: Point(x: 1, y: 1)).dx, 1)
        XCTAssertEqual(vectorize(Point(x: 0, y: 0), p2: Point(x: 1, y: 1)).dy, 1)
        XCTAssertEqual(vectorize(Point(x: -1, y: 3), p2: Point(x: 4, y: 2)).dx, 5)
        XCTAssertEqual(vectorize(Point(x: -1, y: 3), p2: Point(x: 4, y: 2)).dy, -1)
    }
    
    func testDotProduct() {
        XCTAssertEqual(dotProduct(Vector(dx: 0, dy: 0), v2: Vector(dx: 0, dy: 0)), 0)
        XCTAssertEqual(dotProduct(Vector(dx: 1, dy: 2), v2: Vector(dx: 3, dy: 4)), 11)
        XCTAssertEqual(dotProduct(Vector(dx: -3, dy: -7), v2: Vector(dx: -5, dy: -1)), 22)
        XCTAssertEqual(dotProduct(Vector(dx: 1, dy: 2), v2: Vector(dx: -2, dy: 1)), 0)
    }
    
    func testAddScore() {
        let sb = ScoreBoard()
        sb.addScore(2, team: .Home)
        sb.addScore(3, team: .Away)
        sb.addScore(3, team: .Home)
        XCTAssertEqual(sb.homeScore, 5)
        XCTAssertEqual(sb.awayScore, 3)
    }
    
    func testAddFoul() {
        let sb = ScoreBoard()
        sb.addFoul(.Home)
        sb.addFoul(.Away)
        sb.addFoul(.Home)
        XCTAssertEqual(sb.homeFouls, 2)
        XCTAssertEqual(sb.awayFouls, 1)
    }
    
    func testReset() {
        let sb = ScoreBoard()
        sb.addScore(2, team: .Home)
        sb.addScore(3, team: .Away)
        sb.addScore(3, team: .Home)
        sb.addFoul(.Home)
        sb.addFoul(.Away)
        sb.addFoul(.Home)
        sb.homeScore = 2 // to prevent it from passing with no effort
        sb.reset()
        XCTAssertEqual(sb.homeScore, 0)
        XCTAssertEqual(sb.awayScore, 0)
        XCTAssertEqual(sb.homeFouls, 0)
        XCTAssertEqual(sb.awayFouls, 0)
    }
    
    func testScoreDifference() {
        let sb = ScoreBoard()
        sb.homeScore = 8
        sb.awayScore = 4
        XCTAssertEqual(scoreDifference(sb), 4)
        sb.awayScore = 10
        XCTAssertEqual(scoreDifference(sb), -2)
    }
    
    func testUsingClosure() {
        XCTAssertEqual(usingClosure("a", action: { string in
            return 5
        }), true)
        XCTAssertEqual(usingClosure("b", action: { string in
            return 0
        }), true)
        XCTAssertEqual(usingClosure("c", action: { string in
            return -5
        }), false)
    }
    
    func testReturnClosure() {
        let actionExample = returnClosure(3)
        XCTAssertEqual(actionExample(2), false)
        XCTAssertEqual(actionExample(3), true)
        XCTAssertEqual(actionExample(4), true)
        let anotherAction = returnClosure(-1)
        XCTAssertEqual(anotherAction(-2), false)
        XCTAssertEqual(anotherAction(-1), true)
        XCTAssertEqual(anotherAction(0), true)
    }
    
    func testTryCatch() {
        XCTAssertEqual(tryCatch(-1), false)
        XCTAssertEqual(tryCatch(0), true)
        XCTAssertEqual(tryCatch(1), true)
    }
    
    func testIntExtension() {
        XCTAssertEqual(7.addInt(3), 10)
        XCTAssertEqual(2.addInt(-1), 1)
        XCTAssertEqual(0.addInt(0), 0)
    }
    
}
